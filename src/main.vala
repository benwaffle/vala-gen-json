class Field : Object, Json.Serializable {
    public string name { get; set; }
    public string typename;
    public bool required { get; set; default = true; }
    public string? description { get; set; }

    ParamSpec tps = new ParamSpecString ("type", "type", "blurb", null, ParamFlags.READWRITE);

    public override void set_property (ParamSpec pspec, Value value) {
        if (pspec.get_name () == "type") {
            typename = (string) value;
        } else {
            base.set_property (pspec.get_name (), value);
        }
    }

    public override unowned ParamSpec? find_property (string name) {
        if (name == "type") {
            return tps;
        }
        return this.get_class ().find_property (name);
    }
}

class Model : Object, Json.Serializable {
    public string? description { get; set; }
    public GenericArray<Field> fields { get; set; default = new GenericArray<Field>(); }

    public override bool deserialize_property (string prop_name, out Value val, ParamSpec pspec, Json.Node property_node) {
        if (prop_name == "description") {
            return default_deserialize_property (prop_name, out val, pspec, property_node);
        } else if (prop_name == "fields") {
            var fields = new GenericArray<Field> (property_node.get_array ().get_length ());
            property_node.get_array ().foreach_element ((arr, idx, node) => {
                var field = Json.gobject_deserialize (typeof (Field), node) as Field;
                assert (field != null);
                fields.add (field);
            });
            val = fields;
            return true;
        } else {
            warning (@"unknown field $prop_name\n");
            return false;
        }
    }
}

class EnumValue : Object {
    public string name { get; set; }
}

class Enum : Object, Json.Serializable {
    public GenericArray<EnumValue> values { get; set; }

    public override bool deserialize_property (string prop_name, out Value val, ParamSpec pspec, Json.Node property_node) {
        if (prop_name == "values") {
            var values = new GenericArray<EnumValue> (property_node.get_array ().get_length ());
            property_node.get_array ().foreach_element ((arr, idx, node) => {
                var enumvalue = Json.gobject_deserialize (typeof (EnumValue), node) as EnumValue;
                assert (enumvalue != null);
                values.add (enumvalue);
            });
            val = values;
            return true;
        } else {
            warning (@"unknown field $prop_name\n");
            return false;
        }
    }
}

string typeToClassName (string typeName) {
    switch (typeName) {
        case "string": return "string";
        case "boolean": return "bool";
        case "long": return "long";
        default: return /(?:^|_)(.)/.replace (typeName, -1, 0, "\\U\\1");
    }
}

string typeNameToVala (string typeName) {
    MatchInfo mi;
    if (/^\[(.+)\]$/.match (typeName, 0, out mi)) {
        return "GenericArray<" + typeNameToVala (mi.fetch (1)) + ">";
    }
    return typeToClassName (typeName);
}

int main(string[] args) {
    var parser = new Json.Parser ();
    // TODO arg parsing
    try {
        parser.load_from_file (args[1]);
    } catch (Error e) {
        print (e.message);
        return 1;
    }

    var output = FileStream.open (args[2], "w");

    output.printf ("""/*
Autogenerated by vala-gen-json 0.0.1
https://github.com/benwaffle/vala-gen-json)
*/""");

    output.printf ("\nnamespace Apibuilder {\n");

    Json.Object? enums = parser.get_root ().get_object ().get_object_member ("enums");
    enums.foreach_member ((obj, member, node) => {
        var enum = Json.gobject_deserialize (typeof (Enum), node) as Enum;

        output.printf(@"\tenum $(typeToClassName (member)) {\n");
        enum.values.foreach (value => {
            output.printf(@"\t\t$(value.name.up ()),\n");
        });
        output.printf("\t}\n");
    });

    Json.Object? models = parser.get_root ().get_object ().get_object_member ("models");
    models.foreach_member ((obj, member, node) => {
        var model = Json.gobject_deserialize (typeof (Model), node) as Model;

        output.printf(@"\tclass $(typeToClassName (member)) : GLib.Object, Json.Serializable {\n");
        model.fields.foreach ((field) => {
            output.printf(@"\t\tpublic $(typeNameToVala (field.typename))$(field.required ? "" : "?") $(field.name) { get; set; }\n");
        });
        output.printf("\t}\n");
    });

    output.printf("}\n");

    return 0;
}